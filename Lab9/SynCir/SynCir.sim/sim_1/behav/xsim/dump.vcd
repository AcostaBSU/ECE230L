$date
   Fri Mar 28 19:06:39 2025
$end

$version
  2024.2.0
$end

$timescale
  1ps
$end

$scope module test $end
$var reg 1 ! D $end
$var reg 1 " E $end
$var reg 8 # data [7:0] $end
$var reg 2 $ addr [1:0] $end
$var reg 16 % sw [15:0] $end
$var wire 16 & led [15:0] $end
$var wire 1 ' Q $end
$var wire 1 ( NotQ $end
$var wire 8 ) memory [7:0] $end
$scope module uut $end
$var wire 16 * sw [15:0] $end
$var wire 1 + btnC $end
$var wire 16 & led [15:0] $end
$scope module part1 $end
$var wire 1 , D $end
$var wire 1 + E $end
$var wire 1 - Q $end
$var wire 1 . NotQ $end
$var reg 1 / qInt $end
$scope module sr $end
$var wire 1 0 Set $end
$var wire 1 1 Reset $end
$var reg 1 2 Q $end
$var wire 1 . NotQ $end
$upscope $end
$upscope $end
$scope module part2 $end
$var wire 8 3 data [15:8] $end
$var wire 1 + store $end
$var wire 2 4 addr [7:6] $end
$var wire 8 5 memory [15:8] $end
$scope module demuxInp $end
$var wire 8 3 data [15:8] $end
$var wire 2 4 sel [7:6] $end
$var reg 8 6 A [7:0] $end
$var reg 8 7 B [7:0] $end
$var reg 8 8 C [7:0] $end
$var reg 8 9 D [7:0] $end
$upscope $end
$scope module demuxStore $end
$var wire 8 : data [7:0] $end
$var wire 2 4 sel [7:6] $end
$var reg 8 ; A [7:0] $end
$var reg 8 < B [7:0] $end
$var reg 8 = C [7:0] $end
$var reg 8 > D [7:0] $end
$upscope $end
$scope module genblk1[0].byte $end
$var wire 8 ? data [7:0] $end
$var wire 1 @ store $end
$var wire 8 A memory [7:0] $end
$scope module bitZero $end
$var wire 1 B D $end
$var wire 1 @ E $end
$var wire 1 C Q $end
$var wire 1 D NotQ $end
$var reg 1 E qInt $end
$scope module sr $end
$var wire 1 F Set $end
$var wire 1 G Reset $end
$var reg 1 H Q $end
$var wire 1 D NotQ $end
$upscope $end
$upscope $end
$scope module bitOne $end
$var wire 1 I D $end
$var wire 1 @ E $end
$var wire 1 J Q $end
$var wire 1 K NotQ $end
$var reg 1 L qInt $end
$scope module sr $end
$var wire 1 M Set $end
$var wire 1 N Reset $end
$var reg 1 O Q $end
$var wire 1 K NotQ $end
$upscope $end
$upscope $end
$scope module bitTwo $end
$var wire 1 P D $end
$var wire 1 @ E $end
$var wire 1 Q Q $end
$var wire 1 R NotQ $end
$var reg 1 S qInt $end
$scope module sr $end
$var wire 1 T Set $end
$var wire 1 U Reset $end
$var reg 1 V Q $end
$var wire 1 R NotQ $end
$upscope $end
$upscope $end
$scope module bitThree $end
$var wire 1 W D $end
$var wire 1 @ E $end
$var wire 1 X Q $end
$var wire 1 Y NotQ $end
$var reg 1 Z qInt $end
$scope module sr $end
$var wire 1 [ Set $end
$var wire 1 \ Reset $end
$var reg 1 ] Q $end
$var wire 1 Y NotQ $end
$upscope $end
$upscope $end
$scope module bitFour $end
$var wire 1 ^ D $end
$var wire 1 @ E $end
$var wire 1 _ Q $end
$var wire 1 ` NotQ $end
$var reg 1 a qInt $end
$scope module sr $end
$var wire 1 b Set $end
$var wire 1 c Reset $end
$var reg 1 d Q $end
$var wire 1 ` NotQ $end
$upscope $end
$upscope $end
$scope module bitFive $end
$var wire 1 e D $end
$var wire 1 @ E $end
$var wire 1 f Q $end
$var wire 1 g NotQ $end
$var reg 1 h qInt $end
$scope module sr $end
$var wire 1 i Set $end
$var wire 1 j Reset $end
$var reg 1 k Q $end
$var wire 1 g NotQ $end
$upscope $end
$upscope $end
$scope module bitSix $end
$var wire 1 l D $end
$var wire 1 @ E $end
$var wire 1 m Q $end
$var wire 1 n NotQ $end
$var reg 1 o qInt $end
$scope module sr $end
$var wire 1 p Set $end
$var wire 1 q Reset $end
$var reg 1 r Q $end
$var wire 1 n NotQ $end
$upscope $end
$upscope $end
$scope module bitSeven $end
$var wire 1 s D $end
$var wire 1 @ E $end
$var wire 1 t Q $end
$var wire 1 u NotQ $end
$var reg 1 v qInt $end
$scope module sr $end
$var wire 1 w Set $end
$var wire 1 x Reset $end
$var reg 1 y Q $end
$var wire 1 u NotQ $end
$upscope $end
$upscope $end
$upscope $end
$scope module genblk1[1].byte $end
$var wire 8 z data [15:8] $end
$var wire 1 { store $end
$var wire 8 | memory [15:8] $end
$scope module bitZero $end
$var wire 1 } D $end
$var wire 1 { E $end
$var wire 1 ~ Q $end
$var wire 1 !! NotQ $end
$var reg 1 "! qInt $end
$scope module sr $end
$var wire 1 #! Set $end
$var wire 1 $! Reset $end
$var reg 1 %! Q $end
$var wire 1 !! NotQ $end
$upscope $end
$upscope $end
$scope module bitOne $end
$var wire 1 &! D $end
$var wire 1 { E $end
$var wire 1 '! Q $end
$var wire 1 (! NotQ $end
$var reg 1 )! qInt $end
$scope module sr $end
$var wire 1 *! Set $end
$var wire 1 +! Reset $end
$var reg 1 ,! Q $end
$var wire 1 (! NotQ $end
$upscope $end
$upscope $end
$scope module bitTwo $end
$var wire 1 -! D $end
$var wire 1 { E $end
$var wire 1 .! Q $end
$var wire 1 /! NotQ $end
$var reg 1 0! qInt $end
$scope module sr $end
$var wire 1 1! Set $end
$var wire 1 2! Reset $end
$var reg 1 3! Q $end
$var wire 1 /! NotQ $end
$upscope $end
$upscope $end
$scope module bitThree $end
$var wire 1 4! D $end
$var wire 1 { E $end
$var wire 1 5! Q $end
$var wire 1 6! NotQ $end
$var reg 1 7! qInt $end
$scope module sr $end
$var wire 1 8! Set $end
$var wire 1 9! Reset $end
$var reg 1 :! Q $end
$var wire 1 6! NotQ $end
$upscope $end
$upscope $end
$scope module bitFour $end
$var wire 1 ;! D $end
$var wire 1 { E $end
$var wire 1 <! Q $end
$var wire 1 =! NotQ $end
$var reg 1 >! qInt $end
$scope module sr $end
$var wire 1 ?! Set $end
$var wire 1 @! Reset $end
$var reg 1 A! Q $end
$var wire 1 =! NotQ $end
$upscope $end
$upscope $end
$scope module bitFive $end
$var wire 1 B! D $end
$var wire 1 { E $end
$var wire 1 C! Q $end
$var wire 1 D! NotQ $end
$var reg 1 E! qInt $end
$scope module sr $end
$var wire 1 F! Set $end
$var wire 1 G! Reset $end
$var reg 1 H! Q $end
$var wire 1 D! NotQ $end
$upscope $end
$upscope $end
$scope module bitSix $end
$var wire 1 I! D $end
$var wire 1 { E $end
$var wire 1 J! Q $end
$var wire 1 K! NotQ $end
$var reg 1 L! qInt $end
$scope module sr $end
$var wire 1 M! Set $end
$var wire 1 N! Reset $end
$var reg 1 O! Q $end
$var wire 1 K! NotQ $end
$upscope $end
$upscope $end
$scope module bitSeven $end
$var wire 1 P! D $end
$var wire 1 { E $end
$var wire 1 Q! Q $end
$var wire 1 R! NotQ $end
$var reg 1 S! qInt $end
$scope module sr $end
$var wire 1 T! Set $end
$var wire 1 U! Reset $end
$var reg 1 V! Q $end
$var wire 1 R! NotQ $end
$upscope $end
$upscope $end
$upscope $end
$scope module genblk1[2].byte $end
$var wire 8 W! data [23:16] $end
$var wire 1 X! store $end
$var wire 8 Y! memory [23:16] $end
$scope module bitZero $end
$var wire 1 Z! D $end
$var wire 1 X! E $end
$var wire 1 [! Q $end
$var wire 1 \! NotQ $end
$var reg 1 ]! qInt $end
$scope module sr $end
$var wire 1 ^! Set $end
$var wire 1 _! Reset $end
$var reg 1 `! Q $end
$var wire 1 \! NotQ $end
$upscope $end
$upscope $end
$scope module bitOne $end
$var wire 1 a! D $end
$var wire 1 X! E $end
$var wire 1 b! Q $end
$var wire 1 c! NotQ $end
$var reg 1 d! qInt $end
$scope module sr $end
$var wire 1 e! Set $end
$var wire 1 f! Reset $end
$var reg 1 g! Q $end
$var wire 1 c! NotQ $end
$upscope $end
$upscope $end
$scope module bitTwo $end
$var wire 1 h! D $end
$var wire 1 X! E $end
$var wire 1 i! Q $end
$var wire 1 j! NotQ $end
$var reg 1 k! qInt $end
$scope module sr $end
$var wire 1 l! Set $end
$var wire 1 m! Reset $end
$var reg 1 n! Q $end
$var wire 1 j! NotQ $end
$upscope $end
$upscope $end
$scope module bitThree $end
$var wire 1 o! D $end
$var wire 1 X! E $end
$var wire 1 p! Q $end
$var wire 1 q! NotQ $end
$var reg 1 r! qInt $end
$scope module sr $end
$var wire 1 s! Set $end
$var wire 1 t! Reset $end
$var reg 1 u! Q $end
$var wire 1 q! NotQ $end
$upscope $end
$upscope $end
$scope module bitFour $end
$var wire 1 v! D $end
$var wire 1 X! E $end
$var wire 1 w! Q $end
$var wire 1 x! NotQ $end
$var reg 1 y! qInt $end
$scope module sr $end
$var wire 1 z! Set $end
$var wire 1 {! Reset $end
$var reg 1 |! Q $end
$var wire 1 x! NotQ $end
$upscope $end
$upscope $end
$scope module bitFive $end
$var wire 1 }! D $end
$var wire 1 X! E $end
$var wire 1 ~! Q $end
$var wire 1 !" NotQ $end
$var reg 1 "" qInt $end
$scope module sr $end
$var wire 1 #" Set $end
$var wire 1 $" Reset $end
$var reg 1 %" Q $end
$var wire 1 !" NotQ $end
$upscope $end
$upscope $end
$scope module bitSix $end
$var wire 1 &" D $end
$var wire 1 X! E $end
$var wire 1 '" Q $end
$var wire 1 (" NotQ $end
$var reg 1 )" qInt $end
$scope module sr $end
$var wire 1 *" Set $end
$var wire 1 +" Reset $end
$var reg 1 ," Q $end
$var wire 1 (" NotQ $end
$upscope $end
$upscope $end
$scope module bitSeven $end
$var wire 1 -" D $end
$var wire 1 X! E $end
$var wire 1 ." Q $end
$var wire 1 /" NotQ $end
$var reg 1 0" qInt $end
$scope module sr $end
$var wire 1 1" Set $end
$var wire 1 2" Reset $end
$var reg 1 3" Q $end
$var wire 1 /" NotQ $end
$upscope $end
$upscope $end
$upscope $end
$scope module genblk1[3].byte $end
$var wire 8 4" data [31:24] $end
$var wire 1 5" store $end
$var wire 8 6" memory [31:24] $end
$scope module bitZero $end
$var wire 1 7" D $end
$var wire 1 5" E $end
$var wire 1 8" Q $end
$var wire 1 9" NotQ $end
$var reg 1 :" qInt $end
$scope module sr $end
$var wire 1 ;" Set $end
$var wire 1 <" Reset $end
$var reg 1 =" Q $end
$var wire 1 9" NotQ $end
$upscope $end
$upscope $end
$scope module bitOne $end
$var wire 1 >" D $end
$var wire 1 5" E $end
$var wire 1 ?" Q $end
$var wire 1 @" NotQ $end
$var reg 1 A" qInt $end
$scope module sr $end
$var wire 1 B" Set $end
$var wire 1 C" Reset $end
$var reg 1 D" Q $end
$var wire 1 @" NotQ $end
$upscope $end
$upscope $end
$scope module bitTwo $end
$var wire 1 E" D $end
$var wire 1 5" E $end
$var wire 1 F" Q $end
$var wire 1 G" NotQ $end
$var reg 1 H" qInt $end
$scope module sr $end
$var wire 1 I" Set $end
$var wire 1 J" Reset $end
$var reg 1 K" Q $end
$var wire 1 G" NotQ $end
$upscope $end
$upscope $end
$scope module bitThree $end
$var wire 1 L" D $end
$var wire 1 5" E $end
$var wire 1 M" Q $end
$var wire 1 N" NotQ $end
$var reg 1 O" qInt $end
$scope module sr $end
$var wire 1 P" Set $end
$var wire 1 Q" Reset $end
$var reg 1 R" Q $end
$var wire 1 N" NotQ $end
$upscope $end
$upscope $end
$scope module bitFour $end
$var wire 1 S" D $end
$var wire 1 5" E $end
$var wire 1 T" Q $end
$var wire 1 U" NotQ $end
$var reg 1 V" qInt $end
$scope module sr $end
$var wire 1 W" Set $end
$var wire 1 X" Reset $end
$var reg 1 Y" Q $end
$var wire 1 U" NotQ $end
$upscope $end
$upscope $end
$scope module bitFive $end
$var wire 1 Z" D $end
$var wire 1 5" E $end
$var wire 1 [" Q $end
$var wire 1 \" NotQ $end
$var reg 1 ]" qInt $end
$scope module sr $end
$var wire 1 ^" Set $end
$var wire 1 _" Reset $end
$var reg 1 `" Q $end
$var wire 1 \" NotQ $end
$upscope $end
$upscope $end
$scope module bitSix $end
$var wire 1 a" D $end
$var wire 1 5" E $end
$var wire 1 b" Q $end
$var wire 1 c" NotQ $end
$var reg 1 d" qInt $end
$scope module sr $end
$var wire 1 e" Set $end
$var wire 1 f" Reset $end
$var reg 1 g" Q $end
$var wire 1 c" NotQ $end
$upscope $end
$upscope $end
$scope module bitSeven $end
$var wire 1 h" D $end
$var wire 1 5" E $end
$var wire 1 i" Q $end
$var wire 1 j" NotQ $end
$var reg 1 k" qInt $end
$scope module sr $end
$var wire 1 l" Set $end
$var wire 1 m" Reset $end
$var reg 1 n" Q $end
$var wire 1 j" NotQ $end
$upscope $end
$upscope $end
$upscope $end
$scope module mux $end
$var wire 8 A A [7:0] $end
$var wire 8 | B [15:8] $end
$var wire 8 Y! C [23:16] $end
$var wire 8 6" D [31:24] $end
$var wire 2 4 sel [7:6] $end
$var reg 8 o" data [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end

#0
$dumpvars
0!
x!!
x!"
0"
x"!
x""
b0 #
x#!
x#"
b0 $
x$!
x$"
b0 %
x%!
x%"
bxzzzzzzxx &
0&!
0&"
x'
x'!
x'"
x(
x(!
x("
bx )
x)!
x)"
b0 *
x*!
x*"
0+
x+!
x+"
0,
x,!
x,"
x-
0-!
0-"
x.
x.!
x."
x/
x/!
x/"
x0
x0!
x0"
x1
x1!
x1"
x2
x2!
x2"
b0 3
x3!
x3"
b0 4
04!
b0 4"
bx 5
x5!
05"
b0 6
x6!
bx 6"
b0 7
x7!
07"
b0 8
x8!
x8"
b0 9
x9!
x9"
bz0 :
x:!
x:"
bz0 ;
0;!
x;"
b0 <
x<!
x<"
b0 =
x=!
x="
b0 >
x>!
0>"
b0 ?
x?!
x?"
0@
x@!
x@"
bx A
xA!
xA"
0B
0B!
xB"
xC
xC!
xC"
xD
xD!
xD"
xE
xE!
0E"
xF
xF!
xF"
xG
xG!
xG"
xH
xH!
xH"
0I
0I!
xI"
xJ
xJ!
xJ"
xK
xK!
xK"
xL
xL!
0L"
xM
xM!
xM"
xN
xN!
xN"
xO
xO!
xO"
0P
0P!
xP"
xQ
xQ!
xQ"
xR
xR!
xR"
xS
xS!
0S"
xT
xT!
xT"
xU
xU!
xU"
xV
xV!
xV"
0W
b0 W!
xW"
xX
0X!
xX"
xY
bx Y!
xY"
xZ
0Z!
0Z"
x[
x[!
x["
x\
x\!
x\"
x]
x]!
x]"
0^
x^!
x^"
x_
x_!
x_"
x`
x`!
x`"
xa
0a!
0a"
xb
xb!
xb"
xc
xc!
xc"
xd
xd!
xd"
0e
xe!
xe"
xf
xf!
xf"
xg
xg!
xg"
xh
0h!
0h"
xi
xi!
xi"
xj
xj!
xj"
xk
xk!
xk"
0l
xl!
xl"
xm
xm!
xm"
xn
xn!
xn"
xo
0o!
bx o"
xp
xp!
xq
xq!
xr
xr!
0s
xs!
xt
xt!
xu
xu!
xv
0v!
xw
xw!
xx
xx!
xy
xy!
b0 z
xz!
0{
x{!
bx |
x|!
0}
0}!
x~
x~!
$end

#1000
1"
b0zzzzzz10 &
0'
1(
b0 )
1+
0-
1.
0/
00
11
02
b0 5
bz1 :
bz1 ;
1@
b0 A
0C
1D
0E
0F
1G
0H
0J
1K
0L
0M
1N
0O
0Q
1R
0S
0T
1U
0V
0X
1Y
0Z
0[
1\
0]
0_
1`
0a
0b
1c
0d
0f
1g
0h
0i
1j
0k
0m
1n
0o
b0 o"
0p
1q
0r
0t
1u
0v
0w
1x
0y

#2000
0"
0+
bz0 :
bz0 ;
0@

#4000
1!
b1 %
b1 *
1,
b0 3
b0 4

#6000
1"
b0zzzzzz01 &
1'
0(
1+
1-
0.
1/
10
01
12
bz1 :
bz1 ;
1@

#7000
0"
0+
bz0 :
bz0 ;
0@

#9000
0!
b0 %
b0 *
0,
b0 3
b0 4

#11000
b11 #
b1100000000 %
b1100000000 *
0,
b11 3
b0 4
b11 6
b11 ?
1B
1I
0P
0W
0^
0e
0l
0s

#12000
1"
b11zzzzzz10 &
0'
1(
b11 )
1+
0-
1.
0/
00
11
02
b11 5
bz1 :
bz1 ;
1@
b11 A
1C
0D
1E
1F
0G
1H
1J
0K
1L
1M
0N
1O
b11 o"

#13000
0"
0+
bz0 :
bz0 ;
0@

#14000
b1100 #
b1 $
b110001000000 %
bxzzzzzz10 &
0&!
bx )
b110001000000 *
0,
1-!
b1100 3
b1 4
14!
bx 5
b0 6
b1100 7
b0 ;
0;!
bz0 <
b0 ?
0B
0B!
0I
0I!
0P
0P!
0W
0^
0e
0l
bx o"
0s
b1100 z
0}

#15000
1!!
1"
0"!
0#!
1$!
0%!
b1100zzzzzz10 &
0'!
1(!
b1100 )
0)!
0*!
1+
1+!
0,!
1.!
0/!
10!
11!
02!
13!
b1100 5
15!
06!
17!
18!
09!
bz1 :
1:!
bz1 <
0<!
1=!
0>!
0?!
1@!
0A!
0C!
1D!
0E!
0F!
1G!
0H!
0J!
1K!
0L!
0M!
1N!
0O!
0Q!
1R!
0S!
0T!
1U!
0V!
b1100 o"
1{
b1100 |
0~

#16000
0"
0+
bz0 :
bz0 <
0{

#17000
b110000 #
b10 $
b11000010000000 %
bxzzzzzz10 &
0&!
0&"
bx )
b11000010000000 *
0,
0-!
0-"
b110000 3
b10 4
04!
bx 5
b0 7
b110000 8
0;!
b0 <
bz0 =
0B!
0I!
0P!
b110000 W!
0Z!
0a!
0h!
0o!
bx o"
1v!
b0 z
0}
1}!

#18000
0!"
1"
1""
1#"
0$"
1%"
b110000zzzzzz10 &
0'"
1("
b110000 )
0)"
0*"
1+
1+"
0,"
0."
1/"
00"
01"
12"
03"
b110000 5
bz1 :
bz1 =
1X!
b110000 Y!
0[!
1\!
0]!
0^!
1_!
0`!
0b!
1c!
0d!
0e!
1f!
0g!
0i!
1j!
0k!
0l!
1m!
0n!
b110000 o"
0p!
1q!
0r!
0s!
1t!
0u!
1w!
0x!
1y!
1z!
0{!
1|!
1~!

#19000
0"
0+
bz0 :
bz0 =
0X!

#20000
b11000000 #
b11 $
b1100000011000000 %
bxzzzzzz10 &
0&"
bx )
b1100000011000000 *
0,
0-"
b11000000 3
b11 4
b11000000 4"
bx 5
07"
b0 8
b11000000 9
b0 =
bz0 >
0>"
0E"
0L"
0S"
b0 W!
0Z!
0Z"
0a!
1a"
0h!
1h"
0o!
bx o"
0v!
0}!

#21000
1"
b11000000zzzzzz10 &
b11000000 )
1+
b11000000 5
15"
b11000000 6"
08"
19"
bz1 :
0:"
0;"
1<"
0="
bz1 >
0?"
1@"
0A"
0B"
1C"
0D"
0F"
1G"
0H"
0I"
1J"
0K"
0M"
1N"
0O"
0P"
1Q"
0R"
0T"
1U"
0V"
0W"
1X"
0Y"
0["
1\"
0]"
0^"
1_"
0`"
1b"
0c"
1d"
1e"
0f"
1g"
1i"
0j"
1k"
1l"
0m"
1n"
b11000000 o"

#22000
0"
0+
05"
bz0 :
bz0 >

#23000
b0 #
b0 $
b0 %
b11zzzzzz10 &
b11 )
b0 *
0,
b0 3
b0 4
b0 4"
b11 5
07"
b0 9
bz0 ;
b0 >
0>"
0E"
0L"
0S"
0Z"
0a"
0h"
b11 o"

#25000
b1 $
b1000000 %
b1100zzzzzz10 &
b1100 )
b1000000 *
0,
b0 3
b1 4
b1100 5
b0 ;
bz0 <
b1100 o"

#27000
b10 $
b10000000 %
b110000zzzzzz10 &
b110000 )
b10000000 *
0,
b0 3
b10 4
b110000 5
b0 <
bz0 =
b110000 o"

#29000
b11 $
b11000000 %
b11000000zzzzzz10 &
b11000000 )
b11000000 *
0,
b0 3
b11 4
b11000000 5
b0 =
bz0 >
b11000000 o"
